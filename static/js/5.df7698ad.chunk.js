(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{384:function(e,t,n){"use strict";n.d(t,"e",(function(){return a})),n.d(t,"a",(function(){return o})),n.d(t,"b",(function(){return i})),n.d(t,"f",(function(){return c})),n.d(t,"g",(function(){return u})),n.d(t,"c",(function(){return l})),n.d(t,"h",(function(){return f})),n.d(t,"d",(function(){return s})),n.d(t,"i",(function(){return p}));var r=n(429),a=function(e){return e.auth.login},o=function(e){return e.auth.loading},i=function(e){return e.auth.isAuth},c=function(e){return e.response.loading},u=function(e){return e.response.responseValue},l=function(e){return e.editor.width},f=function(e){return e.history.selected},s=function(e){return e.history.records},p=Object(r.a)(f,s,(function(e,t){return t.find((function(t){return t.id===e}))}))},429:function(e,t,n){"use strict";function r(e,t){return e===t}function a(e,t,n){if(null===t||null===n||t.length!==n.length)return!1;for(var r=t.length,a=0;a<r;a++)if(!e(t[a],n[a]))return!1;return!0}function o(e){var t=Array.isArray(e[0])?e[0]:e;if(!t.every((function(e){return"function"===typeof e}))){var n=t.map((function(e){return typeof e})).join(", ");throw new Error("Selector creators expect all input-selectors to be functions, instead received the following types: ["+n+"]")}return t}n.d(t,"a",(function(){return i}));var i=function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return function(){for(var t=arguments.length,r=Array(t),a=0;a<t;a++)r[a]=arguments[a];var i=0,c=r.pop(),u=o(r),l=e.apply(void 0,[function(){return i++,c.apply(null,arguments)}].concat(n)),f=e((function(){for(var e=[],t=u.length,n=0;n<t;n++)e.push(u[n].apply(null,arguments));return l.apply(null,e)}));return f.resultFunc=c,f.dependencies=u,f.recomputations=function(){return i},f.resetRecomputations=function(){return i=0},f}}((function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:r,n=null,o=null;return function(){return a(t,n,arguments)||(o=e.apply(null,arguments)),n=arguments,o}}))},430:function(e,t){e.exports="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 59 43'%3E%3Cdefs%3E%3Cstyle%3E.cls-4%7Bfill:%23fff%7D%3C/style%3E%3C/defs%3E%3Cg id='\u0421\u043b\u043e\u0439_2' data-name='\u0421\u043b\u043e\u0439 2'%3E%3Cg id='\u0421\u043b\u043e\u0439_1-2' data-name='\u0421\u043b\u043e\u0439 1'%3E%3Ccircle cx='44' cy='28' r='15' fill='%23cae8ea'/%3E%3Crect width='47' height='33' rx='4' fill='%2389c5cc'/%3E%3Crect x='6' y='5' width='45' height='31' rx='3' fill='%231a1a1a'/%3E%3Cpath d='M48 6a2 2 0 012 2v25a2 2 0 01-2 2H9a2 2 0 01-2-2V8a2 2 0 012-2h39m0-2H9a4 4 0 00-4 4v25a4 4 0 004 4h39a4 4 0 004-4V8a4 4 0 00-4-4z'/%3E%3Crect class='cls-4' x='10.5' y='12.5' width='12' height='2' rx='1' transform='rotate(30 16.497 13.5)'/%3E%3Crect class='cls-4' x='10.42' y='17.3' width='11.98' height='2' rx='1' transform='rotate(-27.01 16.413 18.299)'/%3E%3Crect class='cls-4' x='22' y='20' width='9' height='2' rx='1'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E"},443:function(e,t,n){"use strict";var r=n(0),a=n.n(r);n(444);function o(){return(o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=function(e){var t=e.children,n=i(e,["children"]);return a.a.createElement("button",o({className:"button"},n),t)};t.a=a.a.memo(c)},444:function(e,t,n){},447:function(e,t,n){"use strict";var r=n(0),a=n(108),o=n(384),i=n(5);t.a=function(e){var t=function(){var e=Object(i.i)(),t=Object(i.f)(),n=Object(i.h)(),a=i.g;return Object(r.useMemo)((function(){return{params:e,location:t,navigate:n,match:a,pathname:t.pathname}}),[e,t,n])}().navigate,n=Object(a.c)(o.b);Object(r.useEffect)((function(){n||t("/signin"),e&&n&&t("/")}),[n])}},473:function(e,t,n){"use strict";var r=n(0),a=n.n(r),o=n(38),i=n.n(o);function c(){return(c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function u(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=Object(r.forwardRef)((function(e,t){var n=e.color,r=void 0===n?"currentColor":n,o=e.size,i=void 0===o?24:o,l=u(e,["color","size"]);return a.a.createElement("svg",c({ref:t,xmlns:"http://www.w3.org/2000/svg",width:i,height:i,viewBox:"0 0 24 24",fill:"none",stroke:r,strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round"},l),a.a.createElement("path",{d:"M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"}),a.a.createElement("circle",{cx:"12",cy:"7",r:"4"}))}));l.propTypes={color:i.a.string,size:i.a.oneOfType([i.a.string,i.a.number])},l.displayName="User",t.a=l},526:function(e,t,n){},527:function(e,t,n){},528:function(e,t,n){},529:function(e,t,n){e.exports=n.p+"1f58ceffb5c2244c33cac01f57bac049.png"},530:function(e,t,n){},547:function(e,t,n){"use strict";n.r(t);var r=n(0),a=n.n(r),o=n(473),i=n(38),c=n.n(i);function u(){return(u=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var f=Object(r.forwardRef)((function(e,t){var n=e.color,r=void 0===n?"currentColor":n,o=e.size,i=void 0===o?24:o,c=l(e,["color","size"]);return a.a.createElement("svg",u({ref:t,xmlns:"http://www.w3.org/2000/svg",width:i,height:i,viewBox:"0 0 24 24",fill:"none",stroke:r,strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round"},c),a.a.createElement("rect",{x:"3",y:"11",width:"18",height:"11",rx:"2",ry:"2"}),a.a.createElement("path",{d:"M7 11V7a5 5 0 0 1 10 0v4"}))}));f.propTypes={color:c.a.string,size:c.a.oneOfType([c.a.string,c.a.number])},f.displayName="Lock";var s=f,p=n(108),m=n(384),d=n(20),g=(n(526),function(e){var t=e.label,n=e.name,r=e.type,o=e.value,i=e.onChange,c=e.Icon;return a.a.createElement("div",{className:"form-field"},a.a.createElement("label",{htmlFor:n},t),a.a.createElement("div",{className:"form-field--input"},a.a.createElement(c,{size:18}),a.a.createElement("input",{name:n,id:n,type:r,value:o,onChange:i})))}),h=a.a.memo(g),v=n(443),y=n(109),b=n(430),O=n.n(b);n(527);function w(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"===typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,a=!1,o=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(u){a=!0,o=u}finally{try{r||null==c.return||c.return()}finally{if(a)throw o}}return n}(e,t)||function(e,t){if(!e)return;if("string"===typeof e)return E(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return E(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function E(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var j=function(){var e=w(Object(r.useState)("SomeUsername"),2),t=e[0],n=e[1],i=w(Object(r.useState)("qwerty"),2),c=i[0],u=i[1],l=Object(p.b)(),f=Object(p.c)(m.a),g=Object(r.useCallback)((function(){return!(t.length<5||c.length<6)}),[t,c]),b=Object(r.useCallback)((function(e){e.preventDefault(),g&&l(d.a.signInAction({login:t,password:c}))}),[t,c]);return a.a.createElement("form",{onSubmit:b,className:"sign-in-form"},a.a.createElement("img",{className:"sign-in-form--logo",src:O.a}),a.a.createElement("h1",{className:"sign-in-form--title"},"API.Query"),a.a.createElement(h,{name:"login",value:t,onChange:function(e){return n(e.target.value)},type:"text",label:"\u041b\u043e\u0433\u0438\u043d*",Icon:o.a}),a.a.createElement(h,{name:"password",value:c,onChange:function(e){return u(e.target.value)},type:"password",label:"\u041f\u0430\u0440\u043e\u043b\u044c*",Icon:s}),a.a.createElement(v.a,{type:"submit",disabled:!g()},!f&&"\u0412\u0445\u043e\u0434",f&&a.a.createElement(y.a,{size:18})))},x=(n(528),function(e){var t=e.children;return a.a.createElement("section",{className:"sign-in-grid--wrapper"},a.a.createElement("div",{className:"sign-in-grid"},t))}),C=n(529),k=n.n(C),S=(n(530),function(){return a.a.createElement("div",{className:"sign-in-image",style:{backgroundImage:'url("'.concat(k.a,'")')}})}),A=n(447),I=function(){return Object(A.a)(!0),a.a.createElement(x,null,a.a.createElement(S,null),a.a.createElement(j,null))};t.default=a.a.memo(I)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,