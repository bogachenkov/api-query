(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{384:function(e,t,n){"use strict";n.d(t,"e",(function(){return a})),n.d(t,"a",(function(){return o})),n.d(t,"b",(function(){return c})),n.d(t,"f",(function(){return u})),n.d(t,"g",(function(){return i})),n.d(t,"c",(function(){return l})),n.d(t,"h",(function(){return s})),n.d(t,"d",(function(){return f})),n.d(t,"i",(function(){return m}));var r=n(429),a=function(e){return e.auth.login},o=function(e){return e.auth.loading},c=function(e){return e.auth.isAuth},u=function(e){return e.response.loading},i=function(e){return e.response.responseValue},l=function(e){return e.editor.width},s=function(e){return e.history.selected},f=function(e){return e.history.records},m=Object(r.a)(s,f,(function(e,t){return t.find((function(t){return t.id===e}))}))},430:function(e,t){e.exports="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 59 43'%3E%3Cdefs%3E%3Cstyle%3E.cls-4%7Bfill:%23fff%7D%3C/style%3E%3C/defs%3E%3Cg id='\u0421\u043b\u043e\u0439_2' data-name='\u0421\u043b\u043e\u0439 2'%3E%3Cg id='\u0421\u043b\u043e\u0439_1-2' data-name='\u0421\u043b\u043e\u0439 1'%3E%3Ccircle cx='44' cy='28' r='15' fill='%23cae8ea'/%3E%3Crect width='47' height='33' rx='4' fill='%2389c5cc'/%3E%3Crect x='6' y='5' width='45' height='31' rx='3' fill='%231a1a1a'/%3E%3Cpath d='M48 6a2 2 0 012 2v25a2 2 0 01-2 2H9a2 2 0 01-2-2V8a2 2 0 012-2h39m0-2H9a4 4 0 00-4 4v25a4 4 0 004 4h39a4 4 0 004-4V8a4 4 0 00-4-4z'/%3E%3Crect class='cls-4' x='10.5' y='12.5' width='12' height='2' rx='1' transform='rotate(30 16.497 13.5)'/%3E%3Crect class='cls-4' x='10.42' y='17.3' width='11.98' height='2' rx='1' transform='rotate(-27.01 16.413 18.299)'/%3E%3Crect class='cls-4' x='22' y='20' width='9' height='2' rx='1'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E"},443:function(e,t,n){"use strict";var r=n(0),a=n.n(r);n(444);function o(){return(o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=function(e){var t=e.children,n=c(e,["children"]);return a.a.createElement("button",o({className:"button"},n),t)};t.a=a.a.memo(u)},444:function(e,t,n){},447:function(e,t,n){"use strict";var r=n(0),a=n(108),o=n(384),c=n(5);t.a=function(e){var t=function(){var e=Object(c.i)(),t=Object(c.f)(),n=Object(c.h)(),a=c.g;return Object(r.useMemo)((function(){return{params:e,location:t,navigate:n,match:a,pathname:t.pathname}}),[e,t,n])}().navigate,n=Object(a.c)(o.b);Object(r.useEffect)((function(){n||t("/signin"),e&&n&&t("/")}),[n])}},466:function(e,t,n){},467:function(e,t,n){},468:function(e,t,n){},469:function(e,t,n){},470:function(e,t,n){},471:function(e,t,n){},472:function(e,t,n){},474:function(e,t,n){},475:function(e,t,n){},521:function(e,t,n){},522:function(e,t,n){e.exports=n.p+"c9a27041fefa5a8d872b4a86d9e9e09b.png"},523:function(e,t,n){},524:function(e,t,n){},525:function(e,t,n){},546:function(e,t,n){"use strict";n.r(t);var r=n(0),a=n.n(r);n(466);function o(){return(o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=function(e){var t=e.children,n=c(e,["children"]);return a.a.createElement("main",o({},n,{className:"app-grid"}),t)},i=n(538),l=n(108),s=n(20),f=n(384),m=n(539),d=n(540),b=n(536),v=n(537);var y=function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),a=1;a<t;a++)n[a-1]=arguments[a];Object(r.useEffect)((function(){var t=function(t){n.some((function(e){return!e.current||e.current.contains(t.target)}))||e(t)};return document.addEventListener("mousedown",t),document.addEventListener("touchstart",t),function(){document.removeEventListener("mousedown",t),document.removeEventListener("touchstart",t)}}),[n,e])};function p(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"===typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,a=!1,o=void 0;try{for(var c,u=e[Symbol.iterator]();!(r=(c=u.next()).done)&&(n.push(c.value),!t||n.length!==t);r=!0);}catch(i){a=!0,o=i}finally{try{r||null==u.return||u.return()}finally{if(a)throw o}}return n}(e,t)||function(e,t){if(!e)return;if("string"===typeof e)return h(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return h(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function h(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var E=function(e){var t=e.cb,n=e.btnRef,o=e.onRemove,c=e.onCopy,u=e.onRun,l=Object(r.useRef)(null),s=p(Object(r.useState)(null),2),f=s[0],m=s[1];y(t,l,n);var d=Object(r.useCallback)((function(){try{c(),m("\u0421\u043a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u043d\u043e")}catch(e){m("\u041e\u0448\u0438\u0431\u043a\u0430")}finally{setTimeout((function(){m(null)}),3e3)}}),[f]);return a.a.createElement("ul",{ref:l,className:"tab--options",onClick:function(e){return e.stopPropagation()}},a.a.createElement("li",{role:"button",onClick:u},a.a.createElement(b.a,{size:16}),"\u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c"),a.a.createElement("li",{role:"button",onClick:d},a.a.createElement(v.a,{size:16}),f||"\u0421\u043a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u0442\u044c"),a.a.createElement("hr",null),a.a.createElement("li",{role:"button",onClick:o},a.a.createElement(i.a,{size:16}),"\u0423\u0434\u0430\u043b\u0438\u0442\u044c"))};n(467);function g(e,t,n,r,a,o,c){try{var u=e[o](c),i=u.value}catch(l){return void n(l)}u.done?t(i):Promise.resolve(i).then(r,a)}function O(e){return function(){var t=this,n=arguments;return new Promise((function(r,a){var o=e.apply(t,n);function c(e){g(o,r,a,c,u,"next",e)}function u(e){g(o,r,a,c,u,"throw",e)}c(void 0)}))}}function j(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"===typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,a=!1,o=void 0;try{for(var c,u=e[Symbol.iterator]();!(r=(c=u.next()).done)&&(n.push(c.value),!t||n.length!==t);r=!0);}catch(i){a=!0,o=i}finally{try{r||null==u.return||u.return()}finally{if(a)throw o}}return n}(e,t)||function(e,t){if(!e)return;if("string"===typeof e)return w(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return w(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function w(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var S=function(e){var t=e.id,n=e.name,o=e.value,c=e.active,u=Object(l.b)(),i=j(Object(r.useState)(!1),2),f=i[0],b=i[1],v=Object(r.useRef)(null),y=Object(r.useCallback)((function(){c||u(s.a.selectRecord(t))}),[t,c]),p=Object(r.useCallback)((function(){u(s.a.removeRecordRequest(t))}),[t]),h=Object(r.useCallback)((function(e){e.stopPropagation(),b((function(e){return!e}))}),[b]),g=Object(r.useCallback)((function(){u(s.a.runFromHistory(t,o))}),[t,o]),w=Object(r.useCallback)(O(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,navigator.clipboard.writeText(o);case 3:e.next=8;break;case 5:e.prev=5,e.t0=e.catch(0),console.error("Failed to copy",e.t0);case 8:case"end":return e.stop()}}),e,null,[[0,5]])}))),[o]);return a.a.createElement("div",{onClick:y,className:"tab ".concat(c?"tab-active":""," ").concat(f?"tab-selected":"")},a.a.createElement(m.a,{size:18}),a.a.createElement("span",{className:"tab--name"},n),a.a.createElement("button",{title:"\u0414\u0435\u0439\u0441\u0442\u0432\u0438\u044f",className:"tab--more",ref:v,onClick:h,type:"button"},a.a.createElement(d.a,{size:18})),f&&a.a.createElement(E,{onCopy:w,onRemove:p,onRun:g,btnRef:v,cb:function(){return b(!1)}}))},k=a.a.memo(S);n(468);function C(e){return function(e){if(Array.isArray(e))return A(e)}(e)||function(e){if("undefined"!==typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"===typeof e)return A(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return A(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function A(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var x=function(){var e=Object(l.c)(f.d),t=Object(l.c)(f.h),n=Object(r.useRef)(null),o=Object(l.b)(),c=Object(r.useCallback)((function(e){n.current&&n.current.scrollTo({top:0,left:n.current.scrollLeft+e.deltaY})}),[]);return a.a.createElement("section",{className:"history"},a.a.createElement("div",{ref:n,onWheel:c,className:"history--tabs"},C(e).reverse().map((function(e){var n=e.id,r=e.name,o=e.value;return a.a.createElement(k,{key:n,id:n,name:r,value:o,active:n===t})}))),a.a.createElement("button",{onClick:function(){return o(s.a.clearHistory())},className:"history--clear"},a.a.createElement(i.a,{size:24})))},R=a.a.memo(x),N=n(541),I=n(542);n(469);function P(){return(P=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function F(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var z=function(e){var t=e.active,n=F(e,["active"]);return a.a.createElement("button",P({className:"".concat(t?"active":""," header-button")},n),n.children)},T=(n(470),function(e){var t=e.children;return a.a.createElement("div",{className:"header-item"},t)});function L(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"===typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,a=!1,o=void 0;try{for(var c,u=e[Symbol.iterator]();!(r=(c=u.next()).done)&&(n.push(c.value),!t||n.length!==t);r=!0);}catch(i){a=!0,o=i}finally{try{r||null==u.return||u.return()}finally{if(a)throw o}}return n}(e,t)||function(e,t){if(!e)return;if("string"===typeof e)return B(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return B(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function B(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var W=function(){var e=Object(r.useCallback)((function(){if("undefined"!==typeof document.fullscreenElement)return"fullscreenElement";if("undefined"!==typeof document.mozFullScreenElement)return"mozFullScreenElement";if("undefined"!==typeof document.msFullscreenElement)return"msFullscreenElement";if("undefined"!==typeof document.webkitFullscreenElement)return"webkitFullscreenElement";throw new Error("fullscreenElement is not supported by this browser")}),[]),t=L(Object(r.useState)(null!=document[e()]),2),n=t[0],o=t[1];Object(r.useLayoutEffect)((function(){return document.onfullscreenchange=function(){o(null!=document[e()])},function(){document.onfullscreenchange=null}}),[]);var c=Object(r.useCallback)((function(){document.fullscreenElement?document.exitFullscreen&&(document.exitFullscreen(),o(!1)):(document.documentElement.requestFullscreen(),o(!0))}),[n]);return a.a.createElement(T,null,a.a.createElement(z,{onClick:c,active:n},n?a.a.createElement(N.a,{size:20}):a.a.createElement(I.a,{size:20})),a.a.createElement("p",null,n?"\u0421\u0432\u0435\u0440\u043d\u0443\u0442\u044c":"\u0420\u0430\u0437\u0432\u0435\u0440\u043d\u0443\u0442\u044c"))},M=n(543),$=n(4),H=function(){var e=Object(l.b)();return a.a.createElement(T,null,a.a.createElement(z,{onClick:function(){return e({type:$.a.SIGN_OUT})}},a.a.createElement(M.a,{size:20})),a.a.createElement("p",null,"\u0412\u044b\u0445\u043e\u0434"))},U=n(430),q=n.n(U),D=(n(471),function(){return a.a.createElement("div",{className:"logo"},a.a.createElement("img",{src:q.a,alt:"API Console"}),a.a.createElement("p",null,"API.Query"))}),V=n(473),J=(n(472),function(){var e=Object(l.c)(f.e);return a.a.createElement(T,null,a.a.createElement("div",{className:"user-indicator"},a.a.createElement(V.a,{size:18})),a.a.createElement("p",null,e))}),Q=(n(474),function(){return a.a.createElement("header",{className:"header"},a.a.createElement(D,null),a.a.createElement(W,null),a.a.createElement(J,null),a.a.createElement(H,null))}),_=n(447);n(475);function X(){return(X=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function G(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"===typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,a=!1,o=void 0;try{for(var c,u=e[Symbol.iterator]();!(r=(c=u.next()).done)&&(n.push(c.value),!t||n.length!==t);r=!0);}catch(i){a=!0,o=i}finally{try{r||null==u.return||u.return()}finally{if(a)throw o}}return n}(e,t)||function(e,t){if(!e)return;if("string"===typeof e)return Y(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return Y(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Y(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function K(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var Z=function(e){var t=e.children,n=e.initialWidth,o=e.minWidth,c=e.callback,u=K(e,["children","initialWidth","minWidth","callback"]),i=G(Object(r.useState)(null),2),l=i[0],s=i[1],f=Object(r.useRef)(null),m=Object(r.useRef)(null),d=Object(r.useRef)(null);Object(r.useEffect)((function(){var e=n||f.current.clientWidth/2;s(e>=o?e:o)}),[]),Object(r.useEffect)((function(){if(c){var e=setTimeout((function(){return c(l)}),1e3);return function(){return clearTimeout(e)}}}),[l]);var b=Object(r.useCallback)((function(e){e.stopPropagation(),m.current&&(d.current={x:e.clientX,width:l},document.addEventListener("mousemove",v),document.addEventListener("mouseup",y))}),[l]),v=Object(r.useCallback)((function(e){if(d.current&&f.current){var t=Math.max(e.clientX-d.current.x,-d.current.width),n=d.current.width+t;return n<=o?l!==o&&s(o):n>=f.current.clientWidth-o?l!==f.current.clientWidth-o&&s(f.current.clientWidth-o):void s(n)}}),[l]),y=Object(r.useCallback)((function(){d.current=null,document.removeEventListener("mousemove",v),document.removeEventListener("mouseup",y)}),[v]);return a.a.Children.count(t)<2||a.a.Children.count(t)>2?(console.error("Error: SplitPane must have two children components"),null):a.a.createElement("section",X({},u,{className:"split-pane",ref:f,style:{gridTemplateColumns:"".concat(l,"px 1fr")}}),a.a.createElement("div",{className:"split-pane--section"},a.a.Children.toArray(t)[0]),a.a.createElement("div",{className:"split-pane--section"},a.a.createElement("div",{className:"split-pane--separator",ref:m,onMouseDown:b}),a.a.Children.toArray(t)[1]))},ee=n(448),te=n(520);n(521);ee.editor.defineTheme("query",{base:"vs",inherit:!0,rules:[{token:"string.key.json",foreground:"#7baeb6",fontStyle:"normal"},{token:"string.value.json",foreground:"#ff564550"},{token:"keyword.json",foreground:"#FF9940"},{token:"number.json",foreground:"#FF9940"},{token:"comment.line.json",foreground:"#ABB0B6",fontStyle:"italic"}],colors:{"editor.background":"#ffffff00","editor.lineHighlightBackground":"#e4ebee80"}});ee.editor.defineTheme("response",{base:"vs",inherit:!0,rules:[{token:"string.key.json",foreground:"#7baeb6",fontStyle:"normal"},{token:"string.value.json",foreground:"#ff564550"},{token:"keyword.json",foreground:"#FF9940"},{token:"number.json",foreground:"#FF9940"},{token:"comment.line.json",foreground:"#ABB0B6",fontStyle:"italic"}],colors:{"editor.background":"#e4ebee00","editor.lineHighlightBackground":"#e4ebee70"}});var ne=a.a.forwardRef((function(e,t){var n=e.value,o=e.id,c=e.isResponseEditor,u=Object(r.useRef)(null);return Object(r.useEffect)((function(){var e=new ResizeObserver(te((function(){var e;null===(e=t.current)||void 0===e||e.layout()}),15));return e.observe(u.current),function(){return e.unobserve(u.current)}})),Object(r.useEffect)((function(){return t.current=ee.editor.create(u.current,{language:"json",scrollBeyondLastLine:!1,hideCursorInOverviewRuler:!0,overviewRulerBorder:!1,overviewRulerLanes:0,scrollbar:{useShadows:!1,verticalHasArrows:!1,verticalScrollbarSize:10},minimap:{enabled:!1},contextmenu:!1,value:n,readOnly:c,lineNumbers:c?"off":"on",theme:c?"response":"query"}),function(){var e;null===(e=t.current)||void 0===e||e.dispose()}}),[]),Object(r.useEffect)((function(){t.current.setValue(n)}),[n,o]),a.a.createElement("div",{ref:u,className:"code-editor ".concat(c?"code-editor-readonly":"")})})),re=a.a.memo(ne),ae=a.a.forwardRef((function(e,t){var n=Object(l.c)(f.i);return a.a.createElement("section",null,a.a.createElement(re,{ref:t,value:n.value,id:n.id}))})),oe=n(522),ce=n.n(oe),ue=(n(523),function(){return a.a.createElement("section",{className:"no-response"},a.a.createElement("img",{src:ce.a,alt:"No response"}),a.a.createElement("p",{className:"no-response--msg"},"\u041d\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u0430"))}),ie=a.a.forwardRef((function(e,t){var n=Object(l.c)(f.g);return a.a.createElement("section",null,n&&a.a.createElement(re,{ref:t,value:n,isResponseEditor:!0}),!n&&a.a.createElement(ue,null))})),le=a.a.memo(ie),se=n(545),fe=n(544);n(524);function me(){return(me=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var de=function(e){return a.a.createElement("button",me({className:"format-button",title:"Shift+Alt+F"},e),a.a.createElement(fe.a,{size:20}),"\u0424\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c")},be=n(109),ve=n(443),ye=(n(525),function(e){var t=e.error,n=e.formatEditorsData,r=e.sendQuery,o=Object(l.c)(f.f);return a.a.createElement("footer",{className:"editor-actions"},a.a.createElement(ve.a,{onClick:r},"\u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c",!o&&a.a.createElement(se.a,{size:20}),o&&a.a.createElement(be.a,{size:20}),t&&a.a.createElement("span",{className:"editor-actions--error"},t)),a.a.createElement(de,{onClick:n}))});function pe(e,t,n,r,a,o,c){try{var u=e[o](c),i=u.value}catch(l){return void n(l)}u.done?t(i):Promise.resolve(i).then(r,a)}function he(e){return function(){var t=this,n=arguments;return new Promise((function(r,a){var o=e.apply(t,n);function c(e){pe(o,r,a,c,u,"next",e)}function u(e){pe(o,r,a,c,u,"throw",e)}c(void 0)}))}}function Ee(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"===typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,a=!1,o=void 0;try{for(var c,u=e[Symbol.iterator]();!(r=(c=u.next()).done)&&(n.push(c.value),!t||n.length!==t);r=!0);}catch(i){a=!0,o=i}finally{try{r||null==u.return||u.return()}finally{if(a)throw o}}return n}(e,t)||function(e,t){if(!e)return;if("string"===typeof e)return ge(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return ge(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ge(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Oe=function(){var e=Ee(Object(r.useState)(null),2),t=e[0],n=e[1],o=Object(r.useRef)(null),c=Object(r.useRef)(null),u=Object(l.c)(f.h),i=Object(l.c)(f.c),m=Object(l.b)(),d=Object(r.useCallback)(he(regeneratorRuntime.mark((function e(){var t;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,null===(t=o.current)||void 0===t?void 0:t.getAction("editor.action.formatDocument").run();case 2:case"end":return e.stop()}}),e)}))),[]),b=Object(r.useCallback)((function(e){return e.replace(/\/\*[\s\S]*?\*\/|([^\\:]|^)\/\/.*$/gm,"$1").trim()}),[]),v=Object(r.useCallback)((function(e){try{return JSON.parse(e),!0}catch(t){return!1}}),[]),y=Object(r.useCallback)((function(){var e,t=null===(e=o.current)||void 0===e?void 0:e.getValue(),r=b(t);v(r)?(n(null),m(s.a.requestQuery({value:t,id:u}))):n("\u041e\u0448\u0438\u0431\u043a\u0430: \u041d\u0435\u0432\u0430\u043b\u0438\u0434\u043d\u044b\u0439 JSON!")}),[u]),p=Object(r.useCallback)((function(e){m(s.a.setWidthOnResize(e))}),[]);return a.a.createElement(a.a.Fragment,null,a.a.createElement(Z,{initialWidth:i,callback:p,minWidth:315},a.a.createElement(ae,{ref:o}),a.a.createElement(le,{ref:c})),a.a.createElement(ye,{error:t,formatEditorsData:d,sendQuery:y}))},je=a.a.memo(Oe);t.default=function(){return Object(_.a)(),a.a.createElement(u,null,a.a.createElement(Q,null),a.a.createElement(R,null),a.a.createElement(je,null))}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,